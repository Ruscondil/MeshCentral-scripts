---
#Dla ułatwienia raidy po prostu przechodzą dalej
- name: Set test device
  set_fact:
    test_device: >-
      {{ 
        ("/dev/sda5" if test_device_short == "hdd" else
         "/dev/sdb1" if test_device_short == "ssd" and inventory_hostname in groups['ssd_hosts'] else
         "/dev/nvme0n1p4" if test_device_short == "nvme" else
         "raid1" if test_device_short == "raid1" and inventory_hostname in groups['raid_hosts'] else 
         "raid0" if test_device_short == "raid0" and inventory_hostname in groups['raid_hosts'] else
         "raid5" if test_device_short == "raid5" and inventory_hostname in groups['raid_hosts'] else
         "raid6" if test_device_short == "raid6" and inventory_hostname in groups['raid_hosts'] else
         "raid10" if test_device_short == "raid10" and inventory_hostname in groups['raid_hosts'] else
         None) | trim 
      }}

- name: Set L2ARC device
  set_fact:
    l2arc_device: >-
      {{ 
        ("/dev/sdb1" if l2arc_device_short == "ssd" and inventory_hostname in groups['ssd_hosts'] else
         None) | trim 
      }}
  when:
    - filesystem_type == "zfs_l2arc"

- name: Set RAID options
  when: inventory_hostname in groups['raid_hosts']
  set_fact:
    raid_opts: >-
      {% if filesystem_type == "btrfs" %}
        {% if raid_option == '0' %}
      -d raid0 -m raid0 /dev/sda /dev/sdb /dev/sdc /dev/sdd
        {% elif raid_option == '1' %}
      -d raid1 -m raid1 /dev/sda /dev/sdb
        {% elif raid_option == '5' %}
      -d raid5 -m raid1 /dev/sda /dev/sdb /dev/sdc
        {% elif raid_option == '6' %}
      -d raid6 -m raid1 /dev/sda /dev/sdb /dev/sdc /dev/sdd
        {% elif raid_option == '10' %}
      -d raid10 -m raid10 /dev/sda /dev/sdb /dev/sdc /dev/sdd
        {% endif %}
      {% endif %}


- name: Skip task for unsupported devices
  ansible.builtin.debug:
    msg: "Skipping tests for device: {{ test_device_short }} on host: {{ inventory_hostname }}"
  when: 
    - test_device is not defined or test_device | length == 0 or test_device == "None"

- name: Run tests for compression options
  include_tasks: perform_compression_tests.yaml
  loop: "{{ compression_options }}"
  loop_control:
    loop_var: compression_option
