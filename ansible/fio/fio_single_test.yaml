---
- name: Set recordsize for ZFS filesystem
  shell: zfs set recordsize={{ item.recordsize | default("128k")}} mypool/myfilesystem
  when: filesystem_type in ["zfs", "zfs_nocache", "zfs_primary", "zfs_l2arc"]

- name: Export the ZFS pool to clear ARC
  ansible.builtin.shell: "zpool export mypool"
  when: filesystem_type in ["zfs", "zfs_l2arc"] and arc_reset is defined and arc_reset == true

- name: Wait until ARC size is below 1GB
  ansible.builtin.shell: "awk '$1 == \"size\" {print $3}' /proc/spl/kstat/zfs/arcstats"
  register: arc_size
  until: arc_size.stdout|int < 1073741824
  retries: 15
  delay: 2
  changed_when: false
  when: filesystem_type in ["zfs", "zfs_l2arc"] and arc_reset is defined and arc_reset == true

- name: Import the ZFS pool to re-enable it
  ansible.builtin.shell: "zpool import mypool"
  when: filesystem_type in ["zfs", "zfs_l2arc"] and arc_reset is defined and arc_reset == true

- name: Collect ZFS ARC statistics (before test)
  shell: cat /proc/spl/kstat/zfs/arcstats
  register: arcstats_before
  when: filesystem_type in ["zfs", "zfs_l2arc"]

- name: Prepare short randwrite FIO config file for snapshot test
  ansible.builtin.shell: |
    cp /tmp/fio_{{ item.name }}.fio /tmp/fio_pretest_{{ item.name }}.fio
    sed -i 's/^rw=.*/rw=randwrite/' /tmp/fio_pretest_{{ item.name }}.fio
    sed -i 's/^runtime=.*/runtime=1/' /tmp/fio_pretest_{{ item.name }}.fio
    sed -i -E 's/^(size=[0-9]+)G/\1M/' /tmp/fio_pretest_{{ item.name }}.fio
    sed -i -E 's/^(size=[0-9]+)G/\1M/' /tmp/fio_{{ item.name }}.fio
  changed_when: true
  failed_when: false
  when:  snapshot_count is defined and snapshot_count|int > 0

- name: Run snapshot tests (in batches)
  include_tasks: fio_snapshot_batch_test.yaml
  when: snapshot_count is defined and snapshot_count|int > 0

- name: Log test details
  ansible.builtin.debug:
    msg:
      - "Testing filesystem: {{ filesystem_type }}"
      - "Testing device: {{ test_device_short }}"
      - "Block size: {{ block_size }}"
      - "Compression: {{ compression_option }}"
      - "recordsize: {{ item.recordsize | default('128k') }}"
      - "Test name: {{ item.name }}"
      - "Snapshot count: {{ snapshot_count }}"

- name: Run FIO test
  ansible.builtin.shell: >
    fio /tmp/fio_{{ item.name }}.fio --output /tmp/fio_{{ item.name }}_output.json --output-format=json
  register: fio_result
  changed_when: false
  failed_when: fio_result.rc != 0
  with_sequence: >
    start=1 
    end={{ item.repeat | default(1) if filesystem_type in ["zfs", "zfs_l2arc"] else 1 }}
  loop_control:
    loop_var: repeat_index
  when: snapshot_count is not defined or (snapshot_count | int) == 0
  
- name: List test files in the mount point (files only)
  ansible.builtin.shell: >
    find {{ test_mount_point }} -maxdepth 1 -type f -printf "%f\n"
  register: test_files
  changed_when: false

- name: Reset file_results for this test
  ansible.builtin.set_fact:
    file_results: []

- name: Check size and attributes for each test file
  when: test_files.stdout_lines is defined and compression_option != "none" and filesystem_type in ["btrfs"]
  loop: "{{ test_files.stdout_lines }}"
  loop_control:
    loop_var: file_name
  include_tasks: fio_check_attributes.yaml

- name: Collect ZFS ARC statistics (after test)
  shell: cat /proc/spl/kstat/zfs/arcstats
  register: arcstats_after
  when: filesystem_type in ["zfs", "zfs_l2arc"]

- name: Write ARC stats to /tmp file (before and after test)
  copy:
    dest: "/tmp/arcstats_{{ item.name }}.log"
    content: |
      ===== ARC STATS BEFORE TEST =====
      {{ arcstats_before.stdout }}

      ===== ARC STATS AFTER TEST =====
      {{ arcstats_after.stdout }}
  when: filesystem_type in ["zfs", "zfs_l2arc"]

- name: Get zfs compressed size (raw output)
  ansible.builtin.command: >
    zfs get -Hp -o value used,compressratio mypool/myfilesystem
  register: zfs_info
  when: filesystem_type in ["zfs", "zfs_nocache", "zfs_primary", "zfs_l2arc"] and compression_option != "none"

- name: Set zfs_raw fact
  ansible.builtin.set_fact:
    zfs_raw: "{{ zfs_info.stdout_lines }}"
  when: filesystem_type in ["zfs", "zfs_nocache", "zfs_primary", "zfs_l2arc"] and compression_option != "none" and zfs_info.rc == 0

- name: Save file results to a JSON file on remote host
  ansible.builtin.copy:
    content: >-
      {{
        (file_results if filesystem_type == "btrfs" else
        [ dict(zfs_raw = zfs_raw) ])
        | to_nice_json
      }}
    dest: "/tmp/file_results_{{ item.name }}.json"
  when: compression_option != "none"

- name: Clean up test files
  ansible.builtin.shell: "rm -rf {{ test_mount_point }}/*"
  changed_when: true

- name: Remove all ZFS pretest snapshots after test
  ansible.builtin.shell: |
    zfs destroy -r mypool/myfilesystem@pretest_{{ item.name }}_{{ repeat_index }}
  when: filesystem_type in ["zfs", "zfs_nocache", "zfs_primary", "zfs_l2arc"] and snapshot_count is defined and snapshot_count|int > 0
  ignore_errors: true
  loop: "{{ range(1, (snapshot_count | int) + 1) | list }}"
  loop_control:
    loop_var: repeat_index

- name: Remove all Btrfs pretest snapshot directories after test
  ansible.builtin.shell: |
    rm -rf {{ test_mount_point }}/pretest_{{ item.name }}_{{ repeat_index }}
  when: filesystem_type == "btrfs" and snapshot_count is defined and snapshot_count|int > 0
  ignore_errors: true
  loop: "{{ range(1, (snapshot_count | int) + 1) | list }}"
  loop_control:
    loop_var: repeat_index

