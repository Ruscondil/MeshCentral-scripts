---
- name: Print current block size
  ansible.builtin.debug:
    msg: "Starting tests for block size: {{ block_size }}, compression: {{ compression_option }} on filesystem: {{ filesystem_type }} on device: {{ test_device_short }}"

- name: Set result paths
  set_fact:
    dd_results_path: "{{ results_base_path }}/dd_results_{{ filesystem_type }}_{{ test_device_short }}/block_size_{{ block_size }}_direct_{{ direct_mode }}_compression_{{ compression_option }}"
    fio_results_path: "{{ results_base_path }}/fio_results_{{ filesystem_type }}_{{ test_device_short }}/block_size_{{ block_size }}_direct_{{ direct_mode }}_compression_{{ compression_option }}"
    hdparm_results_path: "{{ results_base_path }}/hdparm_results_{{ filesystem_type }}_{{ test_device_short }}/block_size_{{ block_size }}_direct_{{ direct_mode }}_compression_{{ compression_option }}"
    sysbench_results_path: "{{ results_base_path }}/sysbench_results_{{ filesystem_type }}_{{ test_device_short }}/block_size_{{ block_size }}_direct_{{ direct_mode }}_compression_{{ compression_option }}}"
    ab_results_path: "{{ results_base_path }}/ab_results_{{ filesystem_type }}_{{ test_device_short }}/block_size_{{ block_size }}_direct_{{ direct_mode }}_compression_{{ compression_option }}"
    corpus_results_path: "{{ results_base_path }}/corpus_results_{{ filesystem_type }}_{{ test_device_short }}/block_size_{{ block_size }}_direct_{{ direct_mode }}_compression_{{ compression_option }}"
- import_tasks: prepare_tasks.yaml

- import_tasks: ./hdparm/hdparm_tests.yaml
  when: "'hdparm' in enabled_programs"

- name: Create bcache cache device
  include_tasks: bcache/create_bcache.yaml
  when: bcache_enabled == true
  
- name: Create filesystem
  block:
    - name: Create EXT4, XFS, BTRFS, F2FS filesystem
      community.general.filesystem:
        fstype: "{{ filesystem_type }}"
        dev: "{{ '/dev/bcache0' if bcache_enabled else test_device }}"     
        opts: "{{ create_opts }}"
        force: true
      when: filesystem_type not in ["zfs", "zfs_nocache", "zfs_primary", "zfs_l2arc", "exfat"] and raid_opts is not defined

    - name: Create Btrfs RAID filesystem
      shell: mkfs.btrfs -f {{ create_opts }} {{ raid_opts }}
      when: filesystem_type == "btrfs" and inventory_hostname in groups['raid_hosts'] and raid_opts is defined

    - name: Create EXFAT filesystem
      shell: "mkfs.exfat {{ '/dev/bcache0' if bcache_enabled else test_device } }}"
      when: filesystem_type in ["exfat"]

    - name: Create ZFS pool and filesystem
      block:
        - name: Create ZFS pool
          shell: zpool create -o ashift={{ ashift_value }} mypool {{ raid_opts if raid_opts is defined else test_device }}

        - name: Create ZFS filesystem
          shell: zfs create mypool/myfilesystem
          
        - name: Set ZFS mountpoint
          shell: zfs set mountpoint={{ test_mount_point }} mypool/myfilesystem

        - name: Add ZFS cache device
          shell: zpool add mypool cache {{ l2arc_device }}
          when: 
            - l2arc_device is defined and l2arc_device != "none"
            - test_device_short == "hdd"
            - filesystem_type == "zfs_l2arc"

        - name: Set ZFS compression
          shell: zfs set compression={{ compression_option }} mypool/myfilesystem
          when: compression_option != "none"

        - name: Disable ZFS primary cache
          shell: zfs set primarycache=none mypool/myfilesystem
          when: filesystem_type == "zfs_nocache"

        - name: Disable ZFS secondary cache
          shell: zfs set secondarycache=none mypool/myfilesystem
          when: filesystem_type in ["zfs_nocache", "zfs_primary"]

        - name: Reset ZFS ARC to default
          shell: echo 16687017984 > /sys/module/zfs/parameters/zfs_arc_max
          when: filesystem_type in ["zfs", "zfs_l2arc"]

        - name: Limit ZFS ARC to 4GB
          shell: echo 4294967296 > /sys/module/zfs/parameters/zfs_arc_max
          when: filesystem_type in ["zfs", "zfs_l2arc"] and arc_limit is defined and arc_limit == true


      when: filesystem_type in ["zfs", "zfs_nocache", "zfs_primary", "zfs_l2arc"]

- name: Mount the device
  ansible.posix.mount:
    path: "{{ test_mount_point }}"
    src: "{{ '/dev/bcache0' if bcache_enabled else test_device }}"     
    fstype: "{{ filesystem_type }}"
    opts: >-
      {% if filesystem_type == "btrfs" and compression_option != "none" %}{% if force_compress is defined and force_compress %}compress-force={{ compression_option }},{{ mount_opts }}{% else %}compress={{ compression_option }},{{ mount_opts }}{% endif %}{% else %}{{ mount_opts }}{% endif %}
    state: ephemeral
  when: filesystem_type not in ["zfs", "zfs_nocache", "zfs_primary", "zfs_l2arc"]

- name: Set bcache mode
  include_tasks: bcache/set_bcache.yaml
  when: bcache_enabled == true

- name: Run corpus tests
  import_tasks: ./corpus/corpus_run.yaml
  when: "'corpus' in enabled_programs and compression_option != \"none\""

- name: Run dd tests
  import_tasks: ./dd/dd_tests.yaml
  when: "'dd' in enabled_programs"

- name: Run fio tests
  import_tasks: ./fio/fio_run.yaml
  when: "'fio' in enabled_programs"

- name: Run sysbench tests
  import_tasks: ./sysbench/sysbench_run.yaml
  when: "'sysbench' in enabled_programs"

- name: Run ab tests
  import_tasks: ./ab/ab_run.yaml
  when: "'ab' in enabled_programs"

- name: Unmount the device
  ansible.posix.mount:
    path: "{{ '/dev/bcache0' if bcache_enabled else test_device }}"  
    state: unmounted
  when: filesystem_type not in ["zfs", "zfs_nocache", "zfs_primary", "zfs_l2arc"]

- name: Destroy ZFS filesystem and pool
  block:
    - name: Unmount ZFS filesystem
      shell: zfs unmount mypool/myfilesystem
      ignore_errors: true

    - name: Destroy ZFS filesystem
      shell: zfs destroy mypool/myfilesystem
      ignore_errors: true

    - name: Destroy ZFS pool
      shell: zpool destroy mypool
      ignore_errors: true
  when: filesystem_type in ["zfs", "zfs_nocache", "zfs_primary", "zfs_l2arc"]